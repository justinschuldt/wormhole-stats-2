{"version":3,"file":"component---src-pages-nf-ts-tsx-6a68c68a992eb2198665.js","mappings":"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","sources":["webpack://wormhole/./src/components/ExplorerStats/Messages/DailyCountLineChart.tsx","webpack://wormhole/./src/components/ExplorerStats/Messages/MonthlyCountColumnChart.tsx","webpack://wormhole/./src/components/ExplorerStats/Messages/WeeklyCountColumnChart.tsx","webpack://wormhole/./src/components/ExplorerStats/NFTs/NFTChains.tsx","webpack://wormhole/./src/pages/NFTs.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Totals } from '../../../types/cloud-functions';\nimport { ResponsiveLine, Serie } from '@nivo/line'\nimport { makeDate, chainColors, chainNameColors } from \"../../../utils/explorer\"\nimport { chainEnums, ChainID, } from '../../../utils/consts';\nimport { Typography } from '@mui/material';\n\n\ninterface DailyCountProps {\n    daily: Totals[\"DailyTotals\"]\n    lastFetched?: number\n    title: string,\n    emitterChain?: number,\n    emitterAddress?: string\n}\n\nconst DailyCountLineChart = (props: DailyCountProps) => {\n\n    const [data, setData] = useState<Array<Serie>>([])\n    const colors = [\n        \"hsl(9, 100%, 61%)\",\n        \"hsl(30, 100%, 61%)\",\n        \"hsl(54, 100%, 61%)\",\n        \"hsl(82, 100%, 61%)\",\n        \"hsl(114, 100%, 61%)\",\n        \"hsl(176, 100%, 61%)\",\n        \"hsl(224, 100%, 61%)\",\n        \"hsl(270, 100%, 61%)\",\n        \"hsl(320, 100%, 61%)\",\n        \"hsl(360, 100%, 61%)\",\n    ]\n\n    useEffect(() => {\n        const chainsDaily: { [chainId: string]: Array<number> } = {}\n        const datum = Object.keys(props.daily).reduce<{ [groupKey: string]: Serie }>((accum, key) => {\n            const vals = props.daily[key]\n            const subKeyColors: { [key: string]: string } = {}\n\n            return Object.keys(vals).reduce<{ [groupKey: string]: Serie }>((subAccum, subKey) => {\n                if (subKey === \"*\") {\n                    return accum\n                }\n                if (props.emitterAddress && subKey === \"*\" || subKey === \"56\" || subKey === \"0\") {\n                    // if this chart is for a single emitterAddress, no need for \"all messages\" line.\n                    return subAccum\n                }\n\n\n                const group = ChainID[Number(subKey)]\n                const todayAmount = vals[subKey]\n                const prev = chainsDaily[subKey] ? chainsDaily[subKey][chainsDaily[subKey].length - 1] : 0\n                const newAmount = Number(prev) + todayAmount\n\n                chainsDaily[subKey] = [...chainsDaily[subKey] || [], newAmount]\n\n                if (!(group in subAccum)) {\n                    // first time this group has been seen\n                    subAccum[group] = { id: group, data: [] }\n                    if (subKey in chainColors) {\n                        subAccum[group].color = chainColors[subKey]\n                    } else {\n\n                        if (!(subKey in subKeyColors)) {\n                            let len = Object.keys(subKeyColors).length\n                            subKeyColors[subKey] = colors[len]\n                        }\n                        subAccum[group].color = subKeyColors[subKey]\n                    }\n                }\n\n                subAccum[group].data.push({\n                    \"y\": newAmount,  // vals[subKey],\n                    \"x\": key\n                })\n                return subAccum\n            }, accum)\n        }, {})\n\n        setData(Object.values(datum))\n    }, [props.daily, props.lastFetched, props.emitterChain, props.emitterAddress])\n\n    return (\n        <div style={{ flexGrow: 1, height: 530, marginBottom: 40 }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <Typography variant=\"h3\" style={{ marginBottom: 60, marginLeft: 30 }}>{props.title}</Typography>\n\n            </div>\n            <ResponsiveLine\n                theme={{ textColor: \"rgba(255, 255, 255, 0.85)\", fontSize: 12, legends: { text: { fontSize: 16 } } }}\n                colors={({ color }) => color}\n                data={data}\n                curve={\"monotoneX\"}\n                margin={{ top: 10, right: 60, bottom: 60, left: 20 }}\n                xScale={{ type: 'point' }}\n                yScale={{ type: 'linear', max: 'auto', min: 'auto', stacked: true }}\n                enableGridX={false}\n                axisTop={null}\n                axisLeft={null}\n                axisBottom={{\n                    format: (value: string) => {\n                        let [year, month, day] = value.split(\"-\")\n                        if (Number(day) === 1) {\n                            return `${month}/${day}`\n                        }\n                        return \"\"\n                    }\n                }}\n                axisRight={{\n                    tickPadding: 5,\n                    tickRotation: 0,\n                }}\n                pointSize={4}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={2}\n                pointBorderColor={{ from: 'serieColor' }}\n                pointLabelYOffset={-12}\n                useMesh={true}\n                enableSlices={\"x\"}\n                isInteractive={true}\n                sliceTooltip={({ slice }) => {\n                    return (\n                        <div\n                            style={{\n                                background: '#010114',\n                                padding: '9px 12px',\n                                border: '1px solid rgba(255, 255, 255, 0.85)',\n                                color: \"rgba(255, 255, 255, 0.85)\",\n                                fontSize: 14\n                            }}\n                        >\n                            <Typography variant=\"caption\" style={{ color: 'rgba(255, 255, 255, 0.85)' }}>{slice.points[0].data.xFormatted}</Typography>\n                            {slice.points.map(point => (\n                                <div\n                                    key={point.id}\n                                    style={{\n                                        display: 'flex',\n                                        padding: '3px 0',\n                                    }}\n                                >\n                                    <div style={{ background: point.serieColor, height: 16, width: 16, }} />&nbsp;\n                                    <span>{point.serieId}</span>&nbsp;-&nbsp;{point.data.yFormatted}\n                                </div>\n                            ))}\n                        </div>\n                    )\n                }}\n            // enableArea={true}\n            // defs={[\n            //     {\n            //         id: 'gradientA',\n            //         type: 'linearGradient',\n            //         colors: [\n            //             { offset: 0, color: 'inherit', opacity: 0.5 },\n            //             { offset: 100, color: 'inherit', opacity: 0.5 },\n            //         ]\n            //     }]}\n            // fill={[{ match: '*', id: 'gradientA' }]}\n            />\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: \"space-evenly\",\n                    width: '100%',\n                }}\n            >\n                {chainEnums.filter(c => c).map((chain) => <div key={chain} style={{ display: 'flex', alignContent: 'center' }}>\n                    <div style={{ background: chainNameColors[chain], height: 16, width: 16, display: 'inline-block' }} />&nbsp;\n                    <span>{chain}</span>\n\n                </div>)}\n            </div>\n        </div>\n    )\n}\n\nexport default DailyCountLineChart\n","import React, { useEffect, useState } from 'react';\nimport { ResponsiveBar, BarDatum } from '@nivo/bar'\nimport { amountFormatter, chainIdColors, chainNameColors, } from \"../../../utils/explorer\"\nimport { Totals } from '../../../types/cloud-functions';\nimport { chainEnums, } from '../../../utils/consts';\nimport { Typography } from '@mui/material';\n\nconst launchDate = new Date(\"2021-09-13T00:00:00.000+00:00\")\n\nfunction monthsSince(d2: Date) {\n    const startMon = launchDate.getMonth() + 1\n    const startYear = launchDate.getFullYear()\n    const monthNum = d2.getMonth() + 1\n    const year = d2.getFullYear();\n    const yearDiff = year - startYear\n    const months = (yearDiff * 12) + monthNum\n    const monthDiff = months - startMon\n    return monthDiff\n}\n\ninterface DailyCountProps {\n    daily: Totals[\"DailyTotals\"]\n    title?: string\n}\n\n\nconst MonthlyCountColumnChart = (props: DailyCountProps) => {\n\n    const [barData, setBarData] = useState<Array<BarDatum>>([])\n\n    useEffect(() => {\n        const data = Object.keys(props.daily).reduce<Array<BarDatum>>((accum, date) => {\n\n            const chains = props.daily[date]\n\n            const month = monthsSince(new Date(date + \"T00:00:00.000+00:00\"))\n            const d = new Date(date)\n            const monthStr = `${d.getMonth() + 1}/${String(d.getFullYear()).slice(-2)}`\n\n            if (month < 0) {\n                return accum\n            }\n            accum[month] = Object.keys(chains).reduce<BarDatum>((subAccum, chain) => {\n                if (chain === \"*\" || chain === \"56\" || chain === \"0\") {\n                    return subAccum\n                }\n                const group = chainEnums[Number(chain)]\n\n                const todayAmount = chains[chain]\n\n                return {\n                    ...subAccum,\n                    [group]: todayAmount,\n                }\n            }, accum[month] ? { ...accum[month] } : { monthStr })\n\n            return accum\n        }, [])\n\n        setBarData(data)\n\n    }, [props.daily])\n\n    const keys = chainEnums.filter(c => c)\n\n    return (\n        <div style={{ height: 530, minWidth: 400, flex: '1', marginBottom: 40, fontSize: 16 }}>\n            <Typography variant=\"h3\" style={{ marginLeft: 20, marginBottom: 40 }}>{props.title || \"Transfers (Notional USD)\"}</Typography>\n\n            <ResponsiveBar\n                theme={{\n                    textColor: \"rgba(255, 255, 255, 0.85)\", fontSize: 14,\n                    labels: {\n                        text: { color: 'rgba(0, 0, 0, 0.95)', fontSize: 18, fontWeight: 500 },\n                    },\n                    axis: {\n                        legend: { text: { fontWeight: 500 } }\n                    }\n                }}\n\n                colors={chainIdColors.slice(1)}\n                data={barData}\n                keys={keys}\n                enableLabel={true}\n                label={({ value }) => {\n                    if (!value) return \"\"\n                    return String(amountFormatter(value, 2))\n                }}\n                labelSkipHeight={16}\n                labelTextColor={\"rgba(0, 0, 0, 0.85)\"}\n                groupMode=\"stacked\"\n                indexBy=\"monthStr\"\n                margin={{\n                    top: 10,\n                    right: 60,\n                    bottom: 60,\n                    left: 20,\n                }}\n                padding={0.3}\n                valueScale={{ type: 'linear', max: 'auto', min: 0 }}\n                indexScale={{ type: 'band', round: true }}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n\n                axisRight={{\n                    format: (value) => amountFormatter(Number(value))\n                }}\n                axisLeft={null}\n                axisBottom={{\n                    format: (value) => {\n                        if (barData[barData.length - 1].monthStr === value) {\n                            return value + \" (\" + new Date().getDate() + \" days)\"\n                        }\n                        return value\n                    }\n                }}\n                tooltip={(data) => {\n                    let { id, value, indexValue, } = data\n                    return (\n                        <div\n                            style={{\n                                background: '#010114',\n                                padding: '9px 12px',\n                                border: '1px solid rgba(255, 255, 255, 0.85)',\n                                color: \"rgba(255, 255, 255, 0.85)\",\n                                fontSize: 14\n                            }}\n                        >\n                            <Typography variant=\"caption\" style={{ color: 'rgba(255, 255, 255, 0.85)' }}>{id} {String(indexValue)}</Typography>\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    padding: '3px 0',\n                                    justifyContent: 'flex-end',\n                                }}\n                            >\n                                {value} messages\n                            </div>\n                        </div>\n                    )\n                }}\n            />\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: \"space-evenly\",\n                    width: '100%',\n                    flexDirection: 'row-reverse',\n                }}\n            >\n                {chainEnums.filter(c => c).map((chain) => <div key={chain} style={{ display: 'flex', alignItems: 'center', }}>\n                    <div style={{ background: chainNameColors[chain], height: 16, width: 16, display: 'inline-block' }} />&nbsp;\n                    <span>{chain}</span>\n                </div>)}\n            </div>\n        </div>\n    )\n}\n\nexport default MonthlyCountColumnChart\n","import React, { useEffect, useState } from 'react';\nimport { Totals } from '../../../types/cloud-functions';\nimport { ResponsiveBar, BarDatum } from '@nivo/bar'\nimport { amountFormatter, chainIdColors, chainNameColors, } from \"../../../utils/explorer\"\n\nimport { chainEnums } from '../../../utils/consts';\nimport { Typography } from '@mui/material';\n\n\nconst week = 7 * 24 * 60 * 60 * 1000;\nconst day = 24 * 60 * 60 * 1000;\n\nfunction startOfWeek(dt: Date): Date {\n    const weekday = dt.getDay();\n    return new Date(dt.getTime() - Math.abs(0 - weekday) * day);\n}\nconst launchDate = new Date(\"2021-09-13T00:00:00.000+00:00\")\nconst startOfLaunchWeek = startOfWeek(launchDate).getTime()\nfunction weeksBetween(d2: Date) {\n\n    return Math.ceil((startOfWeek(d2).getTime() - startOfLaunchWeek) / week);\n}\n\ninterface DailyCountProps {\n    daily: Totals[\"DailyTotals\"]\n    title: string\n\n}\n\nconst WeeklyCountColumnChart = (props: DailyCountProps) => {\n    const [data, setData] = useState<Array<BarDatum>>([])\n\n    useEffect(() => {\n\n        const datum = Object.keys(props.daily).reduce<Array<BarDatum>>((accum, date) => {\n\n            const chains = props.daily[date]\n            const week = weeksBetween(new Date(date + \"T00:00:00.000+00:00\"))\n\n            accum[week] = Object.keys(chains).reduce<BarDatum>((subAccum, chain) => {\n                if (chain === \"*\" || chain === \"56\" || chain === \"0\") {\n                    return subAccum\n                }\n\n                const group = chainEnums[Number(chain)]\n\n                const todayAmount = chains[chain]\n\n                return {\n                    ...subAccum,\n                    [group]: todayAmount\n                }\n\n            }, accum[week] ? { ...accum[week] } : { week })\n            return accum\n        }, [])\n\n        setData(datum)\n    }, [props.daily])\n\n\n    const keys = chainEnums.filter(c => c)\n\n    return (\n        <div style={{ height: 530, minWidth: 400, flex: '1', marginBottom: 40 }}>\n            <Typography variant=\"h3\" style={{ marginBottom: 60, marginLeft: 30 }}>{props.title}</Typography>\n\n            <ResponsiveBar\n                theme={{\n                    textColor: \"rgba(255, 255, 255, 0.85)\", fontSize: 12,\n                    labels: {\n                        text: { color: 'rgba(0, 0, 0, 0.85)', fontSize: 12, fontWeight: 500 },\n                    },\n                    axis: {\n                        legend: { text: { fontWeight: 500, fontSize: 8 } }\n                    }\n                }}\n                data={data}\n                keys={keys}\n                colors={chainIdColors.slice(1)}\n                groupMode=\"stacked\"\n                indexBy=\"week\"\n                margin={{\n                    top: 10,\n                    right: 60,\n                    bottom: 60,\n                    left: 20,\n                }}\n                padding={0.3}\n                valueScale={{ type: 'linear' }}\n                indexScale={{ type: 'band', round: true }}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisLeft={null}\n                axisRight={{\n                    format: (value) => amountFormatter(Number(value), 0)\n                }}\n                axisBottom={{\n                    format: (value) => {\n                        if (data[data.length - 1].week === value) {\n                            return value + \" - \" + new Date().getDate() + \" days\"\n                        }\n                        return value\n                    }\n                }}\n                label={({ value }) => {\n                    if (!value) return \"\"\n                    return String(amountFormatter(value, 0))\n                }}\n                labelSkipWidth={20}\n                labelSkipHeight={16}\n                labelTextColor={\"rgba(0, 0, 0, 0.85)\"}\n\n                tooltip={(data) => {\n                    let { id, value, indexValue } = data\n\n                    return (\n                        <div\n                            style={{\n                                background: '#010114',\n                                padding: '9px 12px',\n                                border: '1px solid rgba(255, 255, 255, 0.85)',\n                                color: \"rgba(255, 255, 255, 0.85)\",\n                                fontSize: 14\n                            }}\n                        >\n                            <Typography variant=\"caption\" style={{ color: 'rgba(255, 255, 255, 0.85)' }}>{id} - Week {String(indexValue)}</Typography>\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    padding: '3px 0',\n                                    justifyContent: 'flex-end',\n                                }}\n                            >\n                                <span>{value} messages</span>\n                            </div>\n\n                        </div>\n                    )\n                }}\n            />\n\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: \"space-evenly\",\n                    width: '100%',\n                    flexDirection: 'row-reverse',\n                }}\n            >\n                {chainEnums.filter(c => c).map((chain) => <div key={chain} style={{ display: 'flex', alignItems: 'center', }}>\n                    <div style={{ background: chainNameColors[chain], height: 16, width: 16, display: 'inline-block' }} />&nbsp;\n                    <span>{chain}</span>\n\n                </div>)}\n            </div>\n        </div>\n\n    )\n}\n\nexport default WeeklyCountColumnChart\n","import { Box, Card, CircularProgress } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNetworkContext } from \"../../../contexts/NetworkContext\";\nimport { ChainID } from \"../../../utils/consts\";\n\nimport StatCardLarge from \"../StatCardLarge\";\nimport { amountFormatter } from \"../../../utils/explorer\";\n\nimport binanceChainIcon from \"../../../images/bsc.svg\";\nimport ethereumIcon from \"../../../images/eth.svg\";\nimport solanaIcon from \"../../../images/solana.svg\";\n\nimport polygonIcon from \"../../../images/polygon.svg\";\nimport avalancheIcon from \"../../../images/avalanche.svg\";\nimport oasisIcon from \"../../../images/oasis.svg\";\nimport fantomIcon from \"../../../images/fantom.svg\"\nimport GridWithCards from \"../../GridWithCards\";\nimport { Totals } from \"../../../types/cloud-functions\";\n\nimport StatCardSmall from \"../StatCardSmall\";\nimport DailyCountLineChart from \"../Messages/DailyCountLineChart\";\nimport WeeklyCountColumnChart from \"../Messages/WeeklyCountColumnChart\";\nimport MonthlyCountColumnChart from \"../Messages/MonthlyCountColumnChart\";\n\ntype GroupBy = undefined | \"chain\" | \"address\";\ntype ForChain = undefined | StatsProps[\"emitterChain\"];\ntype ForAddress = undefined | StatsProps[\"emitterAddress\"];\n\ninterface StatsProps {\n  emitterChain?: number;\n  emitterAddress?: string;\n}\n\nconst NFTChains: React.FC<StatsProps> = ({\n  emitterChain,\n  emitterAddress,\n}) => {\n  const { activeNetwork } = useNetworkContext();\n  const [nfts, setNFTs] = useState<Totals>();\n  const [address, setAddress] = useState<StatsProps[\"emitterAddress\"]>();\n  const [chain, setChain] = useState<StatsProps[\"emitterChain\"]>();\n  const [pollInterval, setPollInterval] = useState<NodeJS.Timeout>();\n  const [controller, setController] = useState<AbortController>(\n    new AbortController()\n  );\n\n\n  const fetchNFTs = (\n    baseUrl: string,\n    groupBy: GroupBy,\n    forChain: ForChain,\n    forAddress: ForAddress,\n    signal: AbortSignal\n  ) => {\n    const totalsUrl = `${baseUrl}nfts`;\n    let url = `${totalsUrl}?`\n    if (groupBy) {\n      url = `${url}&groupBy=${groupBy}`;\n    }\n    if (forChain) {\n      url = `${url}&forChain=${forChain}`;\n    }\n    if (forAddress) {\n      url = `${url}&forAddress=${forAddress}`;\n    }\n\n    return fetch(url, { signal }).then<Totals>((res) => {\n      if (res.ok) return res.json();\n      // throw an error with specific message, rather than letting the json decoding throw.\n      throw \"failed fetching NFTs\";\n    }).then((result) => {\n      setNFTs(result);\n    }, (error) => {\n      if (error.name !== \"AbortError\") {\n        //  handle errors here instead of a catch(), so that we don't swallow exceptions from components\n        console.error(\"failed fetching nfts. error: \", error);\n      }\n    });\n  };\n\n\n  const getData = (props: StatsProps, baseUrl: string, signal: AbortSignal) => {\n    let forChain: ForChain = undefined;\n    let forAddress: ForAddress = undefined;\n    let totalsGroupBy: GroupBy = \"chain\";\n    if (props.emitterChain) {\n      forChain = props.emitterChain;\n      totalsGroupBy = \"address\";\n    }\n    if (props.emitterChain && props.emitterAddress) {\n      forAddress = props.emitterAddress;\n    }\n    return Promise.all([\n      fetchNFTs(baseUrl, totalsGroupBy, forChain, forAddress, signal),\n    ]);\n  };\n\n  const pollingController = (\n    emitterChain: StatsProps[\"emitterChain\"],\n    emitterAddress: StatsProps[\"emitterAddress\"],\n    baseUrl: string\n  ) => {\n    // clear any ongoing intervals\n    if (pollInterval) {\n      clearInterval(pollInterval);\n      setPollInterval(undefined);\n    }\n    // abort any in-flight requests\n    controller.abort();\n    // create a new controller for the new fetches, add it to state\n    const newController = new AbortController();\n    setController(newController);\n    // create a signal for requests\n    const { signal } = newController;\n    // start polling\n    let interval = setInterval(() => {\n      getData({ emitterChain, emitterAddress }, baseUrl, signal);\n    }, 90000);\n    setPollInterval(interval);\n  };\n\n  useEffect(() => {\n    // getData if first load (no totals or recents), or emitterAddress/emitterChain changed.\n    if (\n      !nfts ||\n      emitterAddress !== address ||\n      emitterChain !== chain\n    ) {\n      getData(\n        { emitterChain, emitterAddress },\n        activeNetwork.endpoints.bigtableFunctionsBase,\n        new AbortController().signal\n      );\n    }\n    controller.abort();\n    setNFTs(undefined);\n\n\n    pollingController(\n      emitterChain,\n      emitterAddress,\n      activeNetwork.endpoints.bigtableFunctionsBase\n    );\n    // hold chain & address in state to detect changes\n    setChain(emitterChain);\n    setAddress(emitterAddress);\n  }, [\n    emitterChain,\n    emitterAddress,\n    activeNetwork.endpoints.bigtableFunctionsBase,\n  ]);\n\n  useEffect(() => {\n    return function cleanup() {\n      controller.abort();\n      if (pollInterval) {\n        clearInterval(pollInterval);\n      }\n    };\n  }, [pollInterval, activeNetwork.endpoints.bigtableFunctionsBase]);\n\n\n  return (\n    <>\n      {!nfts ? (\n        <Card\n          sx={{\n            backgroundColor: \"rgba(255,255,255,.07)\",\n            backgroundImage: \"none\",\n            borderRadius: \"28px\",\n            padding: \"24px\",\n            textAlign: \"center\",\n            mt: 5,\n          }}\n        >\n          <CircularProgress />\n        </Card>\n      ) : (\n        <>\n\n          {!emitterChain && !emitterAddress &&\n            nfts && nfts.TotalCount &&\n            <div style={{ margin: '140px 0' }}>\n              <StatCardLarge title=\"NFTs Bridged\" label=\"Transferred by Wormhole\" stat={amountFormatter(nfts.TotalCount[\"*\"])} />\n            </div>\n          }\n\n\n          {!emitterChain && !emitterAddress ? (\n            nfts && nfts.TotalCount ? (\n              <GridWithCards\n                spacing={3}\n                sm={6}\n                md={3}\n                cardPaddingTop={3}\n                imgAlignMd=\"center\"\n                imgOffsetRightMd=\"0px\"\n                imgOffsetTopXs=\"0px\"\n                imgOffsetTopMd=\"-36px\"\n                imgOffsetTopMdHover=\"-52px\"\n                imgPaddingBottomXs={3}\n                headerTextAlign=\"center\"\n                data={[\n                  {\n                    header: ChainID[1],\n                    src: solanaIcon,\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"1\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  },\n                  {\n                    header: ChainID[2],\n                    src: ethereumIcon,\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"2\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  },\n                  {\n                    header: ChainID[4],\n                    src: binanceChainIcon,\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"4\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  },\n                  {\n                    header: ChainID[5],\n                    src: polygonIcon,\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"5\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  },\n                  {\n                    header: ChainID[6],\n                    src: avalancheIcon,\n\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"6\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  },\n                  {\n                    header: ChainID[7],\n                    src: oasisIcon,\n                    description: (\n                      <StatCardSmall\n                        label=\"Bridged\"\n                        stat={amountFormatter(nfts.TotalCount[\"7\"] || 0)}\n                      />\n                    ),\n                    imgStyle: { height: 110 },\n                  }\n                ].concat(\n                  // check the we have transfer data before adding the fantom card\n                  (\"10\" in nfts.TotalCount) &&\n                    (nfts.TotalCount[\"10\"] > 0) ?\n                    [{\n                      header: ChainID[10],\n                      src: fantomIcon,\n                      description: (\n                        <StatCardSmall\n                          label=\"Bridged\"\n                          stat={amountFormatter(nfts.TotalCount[\"10\"] || 0)}\n                        />\n                      ),\n                      imgStyle: { height: 110 },\n                    }] : []\n                )}\n              />\n            ) : (\n              <Box\n                sx={{\n                  padding: \"24px\",\n                  textAlign: \"center\",\n                }}\n              >\n                <CircularProgress />\n              </Box>\n            )\n          ) : null}\n\n          {nfts && nfts.DailyTotals &&\n            <Card\n              sx={{\n                backgroundColor: \"rgba(255,255,255,.07)\",\n                backgroundImage: \"none\",\n                borderRadius: \"28px\",\n                padding: \"24px\",\n              }}\n              style={{ margin: '140px 0', padding: '100px 0' }}\n\n            >\n              <MonthlyCountColumnChart title=\"Monthly Messages by Chain\" daily={nfts.DailyTotals} />\n            </Card>\n          }\n\n\n          {nfts && nfts.DailyTotals &&\n            <Card\n              sx={{\n                backgroundColor: \"rgba(255,255,255,.07)\",\n                backgroundImage: \"none\",\n                borderRadius: \"28px\",\n                padding: \"24px\",\n              }}\n              style={{ margin: '140px 0', padding: '100px 0' }}\n\n            >\n              <WeeklyCountColumnChart title=\"Weekly Messages by Chain\" daily={nfts.DailyTotals} />\n            </Card>\n          }\n\n          {nfts && nfts.DailyTotals &&\n            <Card\n              sx={{\n                backgroundColor: \"rgba(255,255,255,.07)\",\n                backgroundImage: \"none\",\n                borderRadius: \"28px\",\n                padding: \"24px\",\n              }}\n              style={{ margin: '140px 0', padding: '100px 0' }}\n            >\n              <DailyCountLineChart title=\"Daily Messages by Chain\" daily={nfts.DailyTotals} />\n            </Card>\n          }\n\n          {nfts && nfts.DailyTotals &&\n            <Card\n              sx={{\n                backgroundColor: \"rgba(255,255,255,.07)\",\n                backgroundImage: \"none\",\n                borderRadius: \"28px\",\n                padding: \"24px\",\n              }}\n              style={{ margin: '140px 0', padding: '60px' }}\n            >\n              <div>This data comes from the following endpoints:</div>\n              <ul>\n                <li>\n                  https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-nfts\n                </li>\n              </ul>\n\n            </Card>\n          }\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NFTChains;\n","import { PageProps } from \"gatsby\";\nimport { Box, } from \"@mui/material\";\nimport * as React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { SEO } from \"../components/SEO\";\nimport PageHeader from \"../components/PageHeader\";\nimport NFTChains from \"../components/ExplorerStats/NFTs/NFTChains\";\n\ninterface ExplorerQueryValues {\n  emitterChain: number;\n  emitterAddress: string;\n  sequence: string;\n  txId: string;\n}\n\nconst NFTPage = ({ location }: PageProps) => {\n\n  const [emitterChain, setEmitterChain] =\n    React.useState<ExplorerQueryValues[\"emitterChain\"]>();\n  const [emitterAddress, setEmitterAddress] =\n    React.useState<ExplorerQueryValues[\"emitterAddress\"]>();\n  const [sequence, setSequence] =\n    React.useState<ExplorerQueryValues[\"sequence\"]>();\n  const [txId, setTxId] = React.useState<ExplorerQueryValues[\"txId\"]>();\n  const [doneReadingQueryParams, setDoneReadingQueryParams] =\n    React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (location.search) {\n      // take searchparams from the URL and set the values in the form\n      const searchParams = new URLSearchParams(location.search);\n\n      const chain = searchParams.get(\"emitterChain\");\n      const address = searchParams.get(\"emitterAddress\");\n      const seq = searchParams.get(\"sequence\");\n      const tx = searchParams.get(\"txId\");\n\n      // if the search params are different form values, update state\n      if (Number(chain) !== emitterChain) {\n        setEmitterChain(Number(chain) || undefined);\n      }\n      if (address !== emitterAddress) {\n        setEmitterAddress(address || undefined);\n      }\n      if (seq !== sequence) {\n        setSequence(seq || undefined);\n      }\n      if (tx !== txId) {\n        setTxId(tx || undefined);\n      }\n    } else {\n      // clear state\n      setEmitterChain(undefined);\n      setEmitterAddress(undefined);\n      setSequence(undefined);\n      setTxId(undefined);\n    }\n    // be explicit about when it is ok to render\n    setDoneReadingQueryParams(true);\n  }, [location.search])\n  return (\n    <Layout>\n      <SEO\n        title=\"NFTs\"\n        description=\"Explore real-time movement of information and value around the Wormhole ecosystem.\"\n        pathname={location.pathname}\n      />\n\n      <PageHeader headerText=\"Wormholed NFTs\" subText=\"Amount and frequency of Wormholed NFTs\" />\n\n      <Box sx={{ maxWidth: 1220, mx: \"auto\", px: 3.75 }}>\n\n        {doneReadingQueryParams && <>\n\n          {!(emitterChain && emitterAddress && sequence) && // if there is no messageId query &&\n            !txId && (                                      // if there is no transactionId query\n              <NFTChains\n                emitterChain={emitterChain}\n                emitterAddress={emitterAddress}\n              />\n            )}\n\n        </>}\n\n      </Box>\n    </Layout>\n  );\n};\n\nexport default NFTPage;\n"],"names":["props","useState","data","setData","colors","useEffect","chainsDaily","datum","Object","keys","daily","reduce","accum","key","vals","subKeyColors","subAccum","subKey","emitterAddress","group","ChainID","Number","todayAmount","prev","length","newAmount","id","chainColors","color","len","push","values","lastFetched","emitterChain","style","flexGrow","height","marginBottom","display","justifyContent","variant","marginLeft","title","theme","textColor","fontSize","legends","text","curve","margin","top","right","bottom","left","xScale","type","yScale","max","min","stacked","enableGridX","axisTop","axisLeft","axisBottom","format","value","split","month","day","axisRight","tickPadding","tickRotation","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","enableSlices","isInteractive","sliceTooltip","slice","background","padding","border","points","xFormatted","map","point","serieColor","width","serieId","yFormatted","chainEnums","c","chain","alignContent","chainNameColors","launchDate","Date","barData","setBarData","date","d2","startMon","startYear","monthNum","chains","getMonth","getFullYear","d","monthStr","String","minWidth","flex","labels","fontWeight","axis","legend","chainIdColors","enableLabel","label","amountFormatter","labelSkipHeight","labelTextColor","groupMode","indexBy","valueScale","indexScale","round","borderColor","modifiers","getDate","tooltip","indexValue","flexDirection","alignItems","startOfWeek","dt","weekday","getDay","getTime","Math","abs","startOfLaunchWeek","weeksBetween","ceil","week","labelSkipWidth","activeNetwork","useNetworkContext","nfts","setNFTs","address","setAddress","setChain","pollInterval","setPollInterval","AbortController","controller","setController","fetchNFTs","baseUrl","groupBy","forChain","forAddress","signal","url","fetch","then","res","ok","json","result","error","name","console","getData","undefined","totalsGroupBy","Promise","all","endpoints","bigtableFunctionsBase","abort","clearInterval","newController","interval","setInterval","pollingController","TotalCount","StatCardLarge","stat","GridWithCards","spacing","sm","md","cardPaddingTop","imgAlignMd","imgOffsetRightMd","imgOffsetTopXs","imgOffsetTopMd","imgOffsetTopMdHover","imgPaddingBottomXs","headerTextAlign","header","src","solanaIcon","description","StatCardSmall","imgStyle","ethereumIcon","binanceChainIcon","polygonIcon","avalancheIcon","oasisIcon","concat","fantomIcon","Box","sx","textAlign","CircularProgress","DailyTotals","Card","backgroundColor","backgroundImage","borderRadius","MonthlyCountColumnChart","WeeklyCountColumnChart","DailyCountLineChart","mt","location","React","setEmitterChain","setEmitterAddress","sequence","setSequence","txId","setTxId","doneReadingQueryParams","setDoneReadingQueryParams","search","searchParams","URLSearchParams","get","seq","tx","Layout","SEO","pathname","PageHeader","headerText","subText","maxWidth","mx","px"],"sourceRoot":""}